package com.robertsanek.data.quality.anki;

import java.util.Comparator;
import java.util.List;

import org.jsoup.Jsoup;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Ordering;
import com.robertsanek.data.etl.local.sqllite.anki.Card;
import com.robertsanek.data.etl.local.sqllite.anki.Note;
import com.robertsanek.util.Log;
import com.robertsanek.util.Logs;

@IgnoreDQ
@Deprecated
public class BasicCardsThatHaveReverseHaveLowerCaseDefinition extends DataQualityBase {

  static final Log log = Logs.getLog(BasicCardsThatHaveReverseHaveLowerCaseDefinition.class);
  private static final ImmutableSet<Long> NOTE_ID_EXCLUSIONS = ImmutableSet.of(
      1463274236750L,
      1521996903167L,
      1420910284604L,
      1425254106580L,
      1529612417940L,
      1538471588595L,
      1517810024827L,
      1531689694270L,
      1513215265128L,
      1512694067291L,
      1510068822458L,
      1518405173838L,
      1524678898875L,
      1537399534137L,
      1488868306846L,
      1511624958899L,
      1422059074784L,
      1521863633163L,
      1521427709553L,
      1518490719797L,
      1530975930396L,
      1520953039815L,
      1538349561733L,
      1515799750780L,
      1417927143692L,
      1527123984913L,
      1511281865742L,
      1481091581557L,
      1502139160924L,
      1527812635325L,
      1533481864619L,
      1538343084976L,
      1520651233188L,
      1484637924825L,
      1435556508251L,
      1507598672607L,
      1483593574228L,
      1471534536167L,
      1527740317536L,
      1523914154486L,
      1515104038716L,
      1515103919830L,
      1527750137902L,
      1530976426539L,
      1518404109334L,
      1527365704625L,
      1527226549358L,
      1513877191882L,
      1483593329730L,
      1423260823580L,
      1517290306180L,
      1515016375328L,
      1538493744524L,
      1538176155260L,
      1537841602286L,
      1508192762402L,
      1476297472707L,
      1521861817168L,
      1515512019970L,
      1528171883520L,
      1527019668690L,
      1515773911552L,
      1515799980636L,
      1521427913019L,
      1514570418280L,
      1533483326629L,
      1527814598708L,
      1533463953501L,
      1510160135267L,
      1493504457090L,
      1521847262268L,
      1528155706185L,
      1530408863487L,
      1538343154594L,
      1462777107694L,
      1493247924786L,
      1485759163236L,
      1463274283397L,
      1532877768295L,
      1538343300586L,
      1517810416817L,
      1486441777764L,
      1527037767376L,
      1477589260162L,
      1538343318936L,
      1527633882375L,
      1515694673714L,
      1532769363163L,
      1531183454804L,
      1508192582094L,
      1488140917773L,
      1531973138151L,
      1511280129497L,
      1524678898918L,
      1521318205496L,
      1505497917625L,
      1520639133191L,
      1521771890865L,
      1475706363858L,
      1519710127048L,
      1417879860956L,
      1534401599437L,
      1534401543966L,
      1460864130992L,
      1514118098357L,
      1536056140412L,
      1511280320062L,
      1515429229153L,
      1515428381885L,
      1510533914353L,
      1407429551771L,
      1536865537166L,
      1464981533779L,
      1532877851804L,
      1522100633450L,
      1473266736694L,
      1518194130159L,
      1513270316432L,
      1527744908539L,
      1474394561298L,
      1537514487477L,
      1476125019304L,
      1511200980692L,
      1321299134203L,
      1538683320924L,
      1512432092298L,
      1513379345813L,
      1523914527283L,
      1511281823892L,
      1533177876099L,
      1513370054996L,
      1539156060375L,
      1524790091026L,
      1465771456377L,
      1511048323390L,
      1321299135741L,
      1532775570704L,
      1532702179141L,
      1424125689829L,
      1321299135253L,
      1531431249784L,
      1321299136258L,
      1321299136259L,
      1422755949223L,
      1533101678784L,
      1422902605490L,
      1514122723145L,
      1512008440793L,
      1531501883494L,
      1520734701694L,
      1531432368622L,
      1321299134762L,
      1515427362489L,
      1321299135312L,
      1538177312625L,
      1321299137778L,
      1321299136412L,
      1321299134167L,
      1321299133414L,
      1321299137917L,
      1321299134419L,
      1321299136926L,
      1321299135918L,
      1321299137089L,
      1321299134428L,
      1321299136928L,
      1321299134929L,
      1321299135923L,
      1321299133920L,
      1321299137933L,
      1321299133932L,
      1321299136432L,
      1321299134200L,
      1321299134210L,
      1321299135541L,
      1321299133942L,
      1321299134700L,
      1321299133445L,
      1321299133954L,
      1321299137960L,
      1321299136974L,
      1321299134230L,
      1321299133456L,
      1321299134974L,
      1321299134975L,
      1321299134718L,
      1321299135250L,
      1321299134471L,
      1321299136472L,
      1321299136251L,
      1321299135257L,
      1321299134242L,
      1321299136482L,
      1321299133977L,
      1321299135266L,
      1321299134734L,
      1321299136759L,
      1321299136035L,
      1321299135271L,
      1321299137016L,
      1321299136490L,
      1321299134502L,
      1321299135004L,
      1321299135781L,
      1321299133632L,
      1321299137040L,
      1321299137042L,
      1321299134153L,
      1321299136512L,
      1321299136513L,
      1321299134922L,
      1539322322566L,
      1537145585255L,
      1539849207071L,
      1539987860551L,
      1539988049958L,
      1539999110008L,
      1540092618828L,
      1540091691244L,
      1540623992164L,
      1540995981721L,
      1541068183261L,
      1541454873596L,
      1542495706334L,
      1542321511738L,
      1542438330854L,
      1543120272629L,
      1545136144054L,
      1545136144054L,
      1543969949542L,
      1545076719835L,
      1546932059372L,
      1547760105485L,
      0L
  );
  private static final ImmutableSet<String> ALLOWED_STARTING_STRING_BACK = ImmutableSet.of(
      "American",
      "English",
      "FOSS",
      "IRS",
      "Java",
      "Palo Alto",
      "Python",
      "Ruby",
      "SaaS",
      "Spanish",
      "U.S.",
      "UK",
      "UN",
      "US"
  );

  @Override
  void runDQ() {
    if (!Ordering.natural().isOrdered(ALLOWED_STARTING_STRING_BACK)) {
      log.error("Allowed strings list is not sorted.");
    }
    getAllNotesInRelevantDecks(BASIC_MODEL_ID, NOTE_ID_EXCLUSIONS).stream()
        .filter(note -> {
          List<String> fields = splitCsvIntoCommaSeparatedList(note.getFields());
          return fields.size() >= 3 && !fields.get(2).isEmpty();
        })
        .filter(note -> {
          List<Card> cards = cardsByNoteId.get(note.getId());
          return cards.stream().anyMatch(card -> relevantDeckIds.contains(card.getDeck_id()));
        })
        .sorted(Comparator.comparing(Note::getSortField))
        .forEach(note -> {
          List<String> fields = splitCsvIntoCommaSeparatedList(note.getFields());
          String term = Jsoup.parse(fields.get(0)).text();
          String definition = Jsoup.parse(fields.get(1)).text();
          if (!term.startsWith("Visualize")
              && definition.length() > 0
              && ALLOWED_STARTING_STRING_BACK.stream().noneMatch(definition::startsWith)
              && Character.isUpperCase(definition.charAt(0))) {
            log.error("Term '%s': first character of definition is not lower-case.", term);
            violations.put(this.getClass(), "nid:" + note.getId().toString());
          }
        });
  }
}
